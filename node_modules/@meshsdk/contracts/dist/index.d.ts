import { MeshTxBuilder, IFetcher, BrowserWallet, MeshWallet, UTxO, Asset } from '@meshsdk/core';
import * as _meshsdk_common from '@meshsdk/common';
import { ConStr0, PubKeyAddress, Integer, CurrencySymbol, TokenName, BuiltinByteString, Value, ConStr1, Asset as Asset$1, UTxO as UTxO$1 } from '@meshsdk/common';

declare type MeshTxInitiatorInput = {
    mesh: MeshTxBuilder;
    fetcher?: IFetcher;
    wallet?: BrowserWallet | MeshWallet;
    networkId?: number;
    stakeCredential?: string;
};
declare class MeshTxInitiator {
    mesh: MeshTxBuilder;
    fetcher?: IFetcher;
    wallet?: BrowserWallet | MeshWallet;
    stakeCredential?: string;
    networkId: number;
    constructor({ mesh, fetcher, wallet, networkId, stakeCredential, }: MeshTxInitiatorInput);
    protected signSubmitReset: () => Promise<string | undefined>;
    protected queryUtxos: (walletAddress: string) => Promise<UTxO[]>;
    protected getWalletDappAddress: () => Promise<string>;
    protected getWalletCollateral: () => Promise<UTxO | undefined>;
    protected getWalletUtxosWithMinLovelace: (lovelace: number, providedUtxos?: UTxO[]) => Promise<UTxO[]>;
    protected getWalletUtxosWithToken: (assetHex: string, userUtxos?: UTxO[]) => Promise<UTxO[]>;
    protected getAddressUtxosWithMinLovelace: (walletAddress: string, lovelace: number, providedUtxos?: UTxO[]) => Promise<UTxO[]>;
    protected getAddressUtxosWithToken: (walletAddress: string, assetHex: string, userUtxos?: UTxO[]) => Promise<UTxO[]>;
    protected getWalletInfoForTx: () => Promise<{
        utxos: UTxO[];
        collateral: UTxO;
        walletAddress: string;
    }>;
    protected _getUtxoByTxHash: (scriptCbor: string, txHash: string) => Promise<UTxO | undefined>;
}

declare type MarketplaceDatum = ConStr0<[
    PubKeyAddress,
    Integer,
    CurrencySymbol,
    TokenName
]>;
declare const marketplaceDatum: (sellerAddress: string, lovelaceFee: number, assetHex: string) => MarketplaceDatum;
declare class MeshMarketplaceContract extends MeshTxInitiator {
    ownerAddress: string;
    feePercentageBasisPoint: number;
    scriptCbor: string;
    constructor(inputs: MeshTxInitiatorInput, ownerAddress: string, feePercentageBasisPoint: number);
    listAsset: (asset: string, price: number) => Promise<string>;
    delistAsset: (marketplaceUtxo: UTxO) => Promise<string>;
    purchaseAsset: (marketplaceUtxo: UTxO) => Promise<string>;
    relistAsset: (marketplaceUtxo: UTxO, newPrice: number) => Promise<string>;
    getUtxoByTxHash: (txHash: string) => Promise<UTxO | undefined>;
}

declare type VestingDatum = ConStr0<[
    Integer,
    BuiltinByteString,
    BuiltinByteString
]>;
declare class MeshVestingContract extends MeshTxInitiator {
    scriptCbor: string;
    constructor(inputs: MeshTxInitiatorInput);
    depositFund: (amount: Asset[], lockUntilTimeStampMs: number, beneficiary: string) => Promise<string>;
    withdrawFund: (vestingUtxo: UTxO) => Promise<string>;
    getUtxoByTxHash: (txHash: string) => Promise<UTxO | undefined>;
}

declare type InitiationDatum = ConStr0<[PubKeyAddress, Value]>;
declare const initiateEscrowDatum: (walletAddress: string, amount: Asset[]) => InitiationDatum;
declare type ActiveEscrowDatum = ConStr1<[
    PubKeyAddress,
    Value,
    PubKeyAddress,
    Value
]>;
declare const activeEscrowDatum: (initiationDatum: InitiationDatum, walletAddress: string, amount: Asset[]) => ActiveEscrowDatum;
declare type RecipientDepositRedeemer = ConStr0<[PubKeyAddress, Value]>;
declare const recipientDepositRedeemer: (recipient: string, depositAmount: Asset[]) => InitiationDatum;
declare class MeshEscrowContract extends MeshTxInitiator {
    scriptCbor: string;
    constructor(inputs: MeshTxInitiatorInput);
    initiateEscrow: (escrowAmount: Asset[]) => Promise<string>;
    cancelEscrow: (escrowUtxo: UTxO) => Promise<string>;
    recipientDeposit: (escrowUtxo: UTxO, depositAmount: Asset[]) => Promise<string>;
    completeEscrow: (escrowUtxo: UTxO) => Promise<string>;
    getUtxoByTxHash: (txHash: string) => Promise<UTxO | undefined>;
}

declare class MeshGiftCardContract extends MeshTxInitiator {
    tokenNameHex: string;
    paramUtxo: UTxO['input'];
    giftCardCbor: (tokenNameHex: string, utxoTxHash: string, utxoTxId: number) => string;
    redeemCbor: (tokenNameHex: string, policyId: string) => string;
    constructor(inputs: MeshTxInitiatorInput, tokenNameHex?: string, paramUtxo?: UTxO['input']);
    createGiftCard: (tokenName: string, giftValue: Asset[]) => Promise<string>;
    redeemGiftCard: (giftCardUtxo: UTxO) => Promise<string>;
    getUtxoByTxHash: (txHash: string) => Promise<UTxO | undefined>;
    private getScripts;
}

declare class MeshPaymentSplitterContract extends MeshTxInitiator {
    wrapPayees: (payees: string[]) => _meshsdk_common.List;
    scriptCbor: () => string;
    payees: string[];
    constructor(inputs: MeshTxInitiatorInput, payees: string[]);
    sendLovelaceToSplitter: (lovelaceAmount: number) => Promise<string | undefined>;
    triggerPayout: () => Promise<string | undefined>;
}

declare type SwapDatum = ConStr0<[PubKeyAddress, Value, Value]>;
declare class MeshSwapContract extends MeshTxInitiator {
    scriptCbor: string;
    scriptAddress: string;
    constructor(inputs: MeshTxInitiatorInput);
    initiateSwap: (toProvide: Asset$1[], toReceive: Asset$1[]) => Promise<string>;
    acceptSwap: (swapUtxo: UTxO$1) => Promise<string>;
    cancelSwap: (swapUtxo: UTxO$1) => Promise<string>;
    getUtxoByTxHash: (txHash: string) => Promise<UTxO$1 | undefined>;
}

export { ActiveEscrowDatum, InitiationDatum, MarketplaceDatum, MeshEscrowContract, MeshGiftCardContract, MeshMarketplaceContract, MeshPaymentSplitterContract, MeshSwapContract, MeshVestingContract, RecipientDepositRedeemer, SwapDatum, VestingDatum, activeEscrowDatum, initiateEscrowDatum, marketplaceDatum, recipientDepositRedeemer };
